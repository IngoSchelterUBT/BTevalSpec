import sys

#Module for output of ERRORS and WARNINGS

#------------------------------------------------------------------------------#
# Error handler
# Input: code (Error code), msg (Error Message)
#------------------------------------------------------------------------------#
def err(code,msg,cmd=""):
    print('')
    print("ERROR: " + msg)
    print('')
    usage(cmd=cmd)
    sys.exit(code)

#------------------------------------------------------------------------------#
# Warning
# Input: msg (Error Message)
#------------------------------------------------------------------------------#
def warn(msg):
    print('')
    print('WARNING: ' + msg)
    print('')

#------------------------------------------------------------------------------#
# Print usage information
#------------------------------------------------------------------------------#
def usage(cmd=""):
    print("--------------------")
    print("")
    print("Usage:")
    print("")
    print("  ./BTevalSpec.py [-h |--help] [{-v |--verbose=}<dbg>] [{-f |--file=}<fname.yaml>] [<cmd-opt>] cmd arg")
    print("")
    print("  General options")
    print("     -h, -v, and -f are referenced as general options (<gen-opt>) below")
    print("     -v (verbose) has several levels: 0 produces minimal output, 1 is usually useful, 2 is for debugging.")
    print("     -f <file>    specify a different input yaml file (default: eval.yaml)")
    print("")
    print("  Help")
    print("    -h all   Prints all help messages")
    print("    -h gen   Prints general information and workflow")
    print("    -h yaml  Prints the eval.yaml-specific help message.")
    print("    -h cmd   Prints an one-line overview over all commands")
    print("    -h <cmd> Prints the <cmd>-specific help message.")
    print("")
    print("  Reference:")
    print("    The algorithms are explained in")
    print("      I. Schelter, S. Kuemmel,         JCTC 14, 1910-1927 (2018)")
    print("      I. Schelter, S. Kuemmel, et al., unpub. (2025) (will be updated when the paper is published)")
    print("")
    print("  Testing / Examples:")
    print("    Examples/Tests are provided in the 'testTemplates' directory. Copy this directory an run the included tests.")
    if cmd in ["all","gen"]:
        print("")
        print(" ----------")
        print("  Workflow")
        print("    1) Copy/Link all required files into the evaluation directory (dipole moments, external-field profile, n(r,w_k), BTevalSpec.py)")
        print("")
        print("    2) Create a new input-file template")
        print("       ./BTevalSpec.py new")
        print("")
        print("    3) Edit the newly created eval.yaml")
        print("       Add dipole-moment files and external-field profile (if required)")
        print("       Adjust the fit range (if you don't know one yet, see below)")
        print("")
        print("    Note: After each call to BTevalSpec.py in the following, the eval.yaml file is updated and automatically used for the next call to BTevalSpec.py")
        print("          This way, one can manually run the script step-by-step and intervene whenever it is necessary.")
        print("          It is also possible to manually adjust the eval.yaml file.")
        print("")
        print("    4) Add & fit new excitations one after the other (repeat the following steps)")
        print("       0a) [optional] If you don't know how the spectrum looks like, first compute the Fourier- or Pade spectra initially and inspect them")
        print("          ./BTevalSpec.py {ft|pade}")
        print("       0b) [optional] If you want to make an initial guess without fitting, call")
        print("          ./BTevalSpec.py [--guess={ft|pade}] guess")
        print("       a) Run one iteration with the fit command:")
        print("          ./BTevalSpec.py --skip --niter=1 [--nsig=<val>] fit")
        print("             --skip skips the first fit of the input excitations")
        print("             --niter=1 makes one iteration consisting of (i) guess a set of new excitations (ii) fit new excitations (iii) fit all excitations together (iv) compute error and significance measures")
        print("             --nsig=<val> Adjust the threshold that determines if the script accepts a peak as an excitation. A larger value accepts less peaks.")
        print("          This automatically evaluates the current difference between computed spectrum and the fit, finds new excitations at peak positions, and fits the excitations.")
        print("          Note: This command automatically computes the Fourier and Pade spectra if not already done. Later calls will just read the latter.")
        print("       b) [optional] backup the updated eval.yaml so you can return to this stage later if necessary")
        print("       c) check significance measures (in eval.yaml or comprehensively in excit_1.dat) and decide to")
        print("          - stop the fit")
        print("          - adjust the excitations manually")
        print("          - do another iteration -> 4a)")
        print("          - plot spectra/fit/...")
        print("             ./BTevalSpec.py plot")
        print("          Note: A low significance can indicate that an excitation is erroneous. However, it can also show that there are still excitations missing in the vicinity.")
        print("")
        print("    5) Evaluate transition densities (requires the DENSFT section in eval.yaml with as many n(r,w_k) as there are excitations)")
        print("       ./BTevalSpec.py decouple")
    if cmd in ["all","cmd"]:
        print("")
        print(" ----------")
        print(" Command overview:")
        print("")
        print("  yaml     - [only with -h option] Print eval.yaml-specific help message")
        print("  cmd      - [only with -h option] Print eval.yaml-specific help message")
        print("  new      - create a new configuration file")
        print("  ft       - compute Fourier spectrum")
        print("  pade     - compute Pade    spectrum")
        print("  guess    - make an initial guess for the fit")
        print("  fit      - fit and add new excitations")
        print("  plot     - Plot certain spectra and fits")
        print("  rm       - remove an excitation")
        print("  add      - add    an excitation")
        print("  fix      - fix    an excitation (don't change its energy/dipole parameters during the fit)")
        print("  release  - opposite of fix")
        print("  reset    - reset the excitation's energy-interval that restricts the fit")
        print("  decouple - compute transition densities from Fourier-transformed densities (after the fit is complete)")
        print("")
        print("    Note: After each call to BTevalSpec.py in the following, the eval.yaml file is updated and automatically used for the next call to BTevalSpec.py")
        print("          This way, one can manually run the script step-by-step and intervene whenever it is necessary.")
        print("          It is also possible to manually adjust the eval.yaml file.")
    if cmd in ["all","yaml"]:
        print("")
        print(" ----------")
        print("")
        print("    Note: Most fields in the yaml file are filled automatically.")
        print("          After creating a new eval.yaml, you only need to specify/adjust")
        print("           - The file paths (dipole moments and laser profile if required)")
        print("           - The fit range (if you run a fit)")
        print("           - wmax (PADE) if you want a Pade spectrum")
        print("")
        print("    Note: After each call to BTevalSpec.py in the following, the eval.yaml file is updated and automatically used for the next call to BTevalSpec.py")
        print("          This way, one can manually run the script step-by-step and intervene whenever it is necessary.")
        print("          It is also possible to manually adjust the eval.yaml file.")
        print("")
        print(" eval.yaml file format:")
        print("")
        print("DESCRIPTION:                        # Description of evaluation")
        print("DIPOLE:                             # List of dipole moment files")
        print("                                    #   Outer list: dipole moments from different calculations (different external-field polarizations)")
        print("                                    #   Inner list: dipole moments from different spatial areas from the same calculation")
        print("- [dipole_calc1_area1.dat, dipole_calc1_area2.dat]")
        print("- [dipole_calc2_area1.dat, ...]")
        print("  #...")
        print("DENSFT:                             # Specify Fourier-transformed densities n(r,w_k) and w_k for transition-density calculation")
        print("  densft:                           #   List of n(r,w_k) (as many as excitations at w_k close to the excitation energies)")
        print("  - densft01.compact                #     Either as complex-valued BTcompact files (requires BTDFT-modules)")
        print("  - densft02.compact")
        print("  #OR")
        print("  - [densft01r.cube,densft01i.cube] #     or lists of [real,imag] Gaussian cube files")
        print("  - [densft02r.cube,densft02i.cube]")
        print("  #OR")
        print("  - densft01i.cube                  #     or imag-valued Gaussian cube files with the --imag to the decouple command option")
        print("  - densft02i.cube")
        print("  #...")
        print("  densen:                           #   the list of w_k (same order)")
        print("  - 0.131990")
        print("  - 0.134330")
        print("  #...")
        print("  jcalc: 0                          #   the calculation which created the n(r,w_k) (in case dipole-moment data came from different calculations). Starts with '0' (default)")
        print("OPT:                                # Options & values for")
        print("  FT:                               #   Fourier transform")
        print("    calc: false                     #     true: compute, false: read from files")
        print("    minpw: 17                       #     zero padding up to (at least) 2^<minpw>")
        print("    window: 0.0                     #     Kaiser-Bessel Window parameter (leave 0 for fit)")
        print("    smooth: 0.0                     #     Damping rate (leave 0 for fit)")
        print("    rmDC: false                     #     Subtract omega=0 component from the dipole moment (leave false)")
        print("  Pade:                             #   Pade approximation")
        print("    calc: false                     #     true: compute, false: read from files")
        print("    wmax: 0.5                       #     Upper energy bound [Ry] for Pade approximation (increase to approximate a larger part of the spectrum)")
        print("    dw: 1e-05                       #     Energy sampling (distance between omega sampling points)")
        print("    smooth: 0.0022278747967549423   #     Artificial decay rate used for Pade approximation (decrease to get sharper lines)")
        print("    thin: 0                         #     Use every 2^<thin>'s time step to evaluate the Pade spectrum (artificially increases the time-step size for comput. efficiency; leave zero)")
        print("  Fit:                              #   Fit")
        print("    range:                          #     Range of spectrum which should be fitted in Ry")
        print("    - 0.10")
        print("    - 0.28")
        print("    imagonly: false                 #     [in, optional] Set true if only the imaginary part shall be used (automatically true for a boost)")
        print("    fiterr: 0.01029415706259413     #     [out         ] Comprehensive fit error")
        print("    fitphase: false                 #     [in, optional] If true, the phase is used as a fit parameter (otherwise, it determined from the external-field profile)")
        print("EXT:                                # External-field")
        print("  profile: laser_profile.dat        #   [in, if laser excitation] Laser-profile file")
        print("  invertPhase: false                #   [in, optional           ] If true, multiplies the laser profile with '-1' (e.g., for BTDFT until v3.6.0)")
        print("SPEC:                               # Spectral information (fit)")
        print("- name: S1                          #   Excitation name (defaults to S<number>) but can be changed")
        print("  fix: false                        #   True, if the excitation is fixed (can be set manually for the next run)")
        print("  energy: 0.13198769111844885       #   Current value of the excitation's energy")
        print("  phase: 0.0                        #   Current value of the excitation's phase")
        print("  dipoles:                          #   Area-contributions to the transition dipole (consistent over calculations)")
        print("  - - 0.0014764204066536474")
        print("    - 0.3074363126526123")
        print("    - 0.3473751252687603")
        print("  ampl:                             #   Calculation- and Area-contributions to the vector amplitudes (different for different calculations)")
        print("  - - - -1.977874864015696e-06")
        print("      - -0.0004118546129144092")
        print("      - -0.000465358325824443")
        print("  dipole:                           #   Global transition dipole")
        print("  - 0.0014764204066536474")
        print("  - 0.3074363126526123")
        print("  - 0.3473751252687603")
        print("  strength: 0.004733710908363272    #   Oscillator strength")
        print("                                    #   Significance measures:")
        print("  signifFit: 0.0                    #   Only computed with --signif option to the 'fit' command")
        print("  signifErr: 0.9334766695559699")
        print("  signifAng: 0.9037784539834844")
        print("  signifExc: 0.0                    #   Only computed with --signif option to the 'fit' command")
        print("  signifRng: 0.9999997972734961")
        print("  signifPha: 1.0")
        print("    #...                            #   There are further quantities such as error estimates etc. for the single quantities")
        print("- name: S2                          # Further excitations")
        print("  #...")
    if cmd in ["all","new"]:
        print("")
        print(" ----------")
        print(" Create a new configuration file")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] new")
        print("")
        print("    Generates a new yaml file (default: eval.yaml).")
        print("    After creation, the user must add dipole-moment files and potentially a laser-profile file")
        print("    Moreover, the fit range [Ry] can be adjusted.")
        print("")
        print("  Example (eval.yaml):")
        print("")
        print("...")
        print("DIPOLE:                             # List of dipole moment files. Different calculations are only allowed to differ in the boost/laser polarization")
        print("  - [dipole_calc01_area01.dat, dipole_calc01_area02.dat]")
        print("  - [dipole_calc02_area01.dat, dipole_calc02_area02.dat]")
        print("EXT:")
        print("  profile: laser_profile.dat        # Profile of excitation")
        print("  invertPhase: false                # Before BTDFT v3.6.0, the laser profile missed a factor '-1'. InvertPhase==True compensates this error.")
        print("OPT:")
        print("  ...")
        print("  Fit:")
        print("    range:                          # Range of spectrum which should be fitted in Ry")
        print("    - 0.10                          # If you don't know a proper fit range yet, you separately compute the FT/Pade spectrum and inspect it visally.")
        print("    - 0.40")
        print("...")
        print("")
    if cmd in ["all","ft"]:
        print("")
        print(" ----------")
        print(" Fourier transform")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--minpw=<pw>] [--smooth=<smooth>] [--window=<window>] [--no-rmDC] ft")
        print("")
        print("    Fourier transforms the dipole moment files, writes the transformations, and updates eval.yaml. ")
        print("")
        print("  Note: If not disabled in the eval.yaml file, the Fourier transform is automatically computed if you use the 'fit' command.")
        print("        This command is useful, if you only want the Fourier spectrum in the first place without any fitting.")
        print("")
        print("  Note: If the Fourier transform was computed previously, it is not computed again but read from the previously generated files")
        print("        which is automatically enforced by setting 'FT: {calc: false}' in the eval.yaml file.")
        print("        If, for some reason (e.g. you deleted the FT files), you want to compute the Fourier transform again, you have to set this option to 'true' again in eval.yaml.")
    if cmd in ["all","pade"]:
        print("")
        print(" ----------")
        print(" Pade approx")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--wmax=<wmax>] [--dw=<dw>] [--smooth=<smooth>] [--thin=<thin>] pade")
        print("")
        print("    Pade approximates the dipole moment files, writes the transformations, and updates eval.yaml.")
        print("")
        print("  Note: If not disabled in the eval.yaml file, the Pade spectrum is automatically computed if you use the 'fit' command.")
        print("        This command is useful, if you only want the Pade spectrum in the first place without any fitting.")
        print("")
        print("  Note: If the Pade spectrum was computed previously, it is not computed again but read from the previously generated files")
        print("        which is automatically enforced by setting 'Pade: {calc: false}' in the eval.yaml file.")
        print("        If, for some reason (e.g. you deleted the FT files), you want to compute the Fourier transform again, you have to set this option to 'true' again in eval.yaml.")
    if cmd in ["all","guess"]:
        print("")
        print(" ----------")
        print(" Make a new guess based on the Fourier (default) or Pade spectrum)")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--guess=pade [<pade opt>] [--thres=<thres>]| --guess=ft [<ft opt>] [--nsig=<nsig>]] [--range=<lb,rb>] guess")
        print("")
        print("    Creates a new guess, sets the plot range, and updates eval.yaml.")
        print("    The guess is based on the Pade (--guess=pade) or Fourier (--guess=ft, default) spectrum")
        print("    with the given <pade opt> or <ft opt> (if the latter were not computed previously).")
    if cmd in ["all","rm"]:
        print("")
        print(" ----------")
        print(" Remove excitation without fit")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] rm <exlist>")
        print("")
        print("    Remove <exlist> from the list of excitations, where exlist is a comma-separated list of excitation labels, e.g., S1,S2,S3")
        print("    Instead, you can also remove teh excitation manually from eval.yaml.")
    if cmd in ["all","add"]:
        print("")
        print(" ----------")
        print(" Add excitation without fit")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--nsig=<nsig> | --nex=<nex> | --energy=<list-of-energies>] [--nofix] add")
        print("")
        print("    Add new excitations either at given energies (optional) or automatically using a sigma-threshold (default: 2.0), i.e.,")
        print("    add excitations that are larger than the mean value of maxima of ft-fit plus <nsig> times the standard deviation of maxima heights")
        print("    Do no fit but guess phase and dipoles moments.")
        print("    Before adding new excitations, the existing ones are fixed. Switch that off with the --nofix option")
    if cmd in ["all","reset"]:
        print("")
        print(" ----------")
        print(" Reset energy range to the standard pi/T interval around the current excitations' energy values")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] reset")
        print("")
        print("  Note: When an excitation is added by the code, its energy is restricted to a symmetric interval around the initial energy value to stabilize the fit.")
        print("        If you note that a rng significance value of an excitation is not close to 1, it may be useful to reset the energy ranges and, thus, give more freedom to the energy fit")
    if cmd in ["all","fit"]:
        print("")
        print(" ----------")
        print(" Fit")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [<ft opt>] [<guess opt>] [--reset] [--skip] [--single] [--signif] [--range=<lb,rb>] [--crit=<error criterion> | --nadd=<nadd>] [--nsig=<nsig>] [--niter=<niter>] [--imag] [--fitphase] fit")
        print("")
        print("    Fit current excitations (if not --skip), add and fit <nadd> excitations one after the other, and update eval.yaml.")
        print("    --skip: Skip the first collective fit of existing excitations (useful if eval.yaml was changed manually)")
        print("    --imag: only use imaginary part for fitting; automatically true for boost excitation.")
        print("    <nadd> defaults to 0")
        print("    --single: Instead of fitting all excitations at once, fit them one after the other from high to low strength ")
        print("    Does a prior Fourier transform if not already done.")
        print("    Does a prior Guess if not already done; requires a range option.")
        print("    --signif: Compute the significance-values that require fitting (are costly)")
        print("    --fitphase: Use phase as fit parameter")
        print("    --crit: Convergence criterion (only relevant if nadd==0 or not present): Add excitations until the fit error drops below this criterion.")
        print("    --niter: Maximum number of add-excitation iterations (in each iteration, the number of added excitations is determined by the <nsig> threshold)")
        print("    --reset: Reset energy range")
        print("")
        print("  Note: The simplest approach to fit a spectrum is to do")
        print("        1) one iteration at a time using")
        print("           ./BTevalSpec.py --skip [--nsig=<nsig>] --niter=1 fit")
        print("        2) then evaluate the added excitations (e.g. by inspecting the significance measures)")
        print("        3) backup the resulting eval.yaml")
        print("        4) go to 1) (use --skip to suppress the initial fitting of the input excitations, use the --nsig option to change the threshold for adding new excitation)")
        print("")
        print(" Note: If any significance measure is not close to 1, this can (!) indicate that an excitation is erroneous. Try to remove the the excitation using")
        print("           ./BTevalSpec.py rm <excitation identifier>")
        print("       and call")
        print("           ./BTevalSpec.py fit")
        print("       to just fit the remaining excitations again")
        print("       If the rng significance of an excitation is not close to 1, resetting the energy range using --reset gives the fitting more freedom, which helps sometimes.")
        print("")
        print(" Note: At the end of this command, the script prints what it would do next (i.e., which excitations it would add next).")
        print("       Don't be confused, it looks as if the script had actually done another fit iteration, however, it is just an information.")
        print("")
        print(" Note: Several output files are generated that, e.g., contain the spectra, the fit, the fit-objective function (=kind of f-resolved fit error), a table of excitations, etc.")
        print("       Also, during the fit, the scripts opens a window with the current fit-objective and nsig threshold before fitting in each iteration to show what is actually done.")
        print("       ")
    if cmd in ["all","plot"]:
        print("")
        print(" ----------")
        print(" Plot")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--exclude=<listOfExcitations>] plot <listOfMeasures>")
        print("")
        print("    Plots <listOfMeasure> in {pade, ft, fit, err, spectrum} with excitations")
        print("    --exclude=<listOfExcitations>: Excitations that are excluded from the (fitted) data")
    if cmd in ["all","fix"]:
        print("")
        print(" ----------")
        print(" Fix")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--invert] fix <listOfExcitations>")
        print("")
        print("    Fix the given list of excitations or energy range (those are excluded from the fit)")
        print("    --invert: Do the same but inverted")
        print("    You can do this manually in eval.yaml as well")
    if cmd in ["all","release"]:
        print("")
        print(" ----------")
        print(" Release")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--invert] release <listOfExcitations>")
        print("")
        print("  Release (un-fix) all excitations, cf. 'fix' command")
    if cmd in ["all","decouple"]:
        print("")
        print(" ----------")
        print(" Decouple")
        print("")
        print("  ./BTevalSpec.py [<gen-opt>] [--jcalc=<calc-idx>] decouple")
        print("")
        print("  Decouple given Fourier-transformed densities n(r,omega) at given omega to get the proper transition densities.")
        print("  Requires Fourier-transform of the density at as many energies as there are excitations (ideally the excitation energies themselves) and a calculation identifier (calculation index).")
        print("  jcalc determines the calculations index from which the density stems (default: 0).")
        print("")
        print("DENSFT:                             # Specify Fourier-transformed densities n(r,w_k) and w_k for transition-density calculation")
        print("  densft:                           #   List of n(r,w_k) (as many as excitations at w_k close to the excitation energies)")
        print("  - densft01.compact                #     Either as complex-valued BTcompact files (requires BTDFT-modules)")
        print("  - densft02.compact")
        print("  #OR")
        print("  - [densft01r.cube,densft01i.cube] #     or lists of [real,imag] Gaussian cube files")
        print("  - [densft02r.cube,densft02i.cube]")
        print("  #OR")
        print("  - densft01i.cube                  #     or imag-valued Gaussian cube files with the --imag to the decouple command option")
        print("  - densft02i.cube")
        print("  #...")
        print("  densen:                           #   the list of w_k (same order)")
        print("  - 0.131990")
        print("  - 0.134330")
        print("  #...")
        print("  jcalc: 0")
    print("")
